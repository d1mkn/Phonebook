{"version":3,"file":"static/js/827.1736e265.chunk.js","mappings":"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","sources":["validationSchema/validationSchema.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ListItem/ListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    })\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.Error;\nexport const selectFilter = state => state.filter;\n","import React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { validationSchema } from 'validationSchema/validationSchema';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const checkContact = values => {\n    const { name, number } = values;\n    const contact = {\n      name,\n      number,\n    };\n\n    contacts.find(person => person.name === contact.name)\n      ? alert(`${contact.name} is already in contacts`)\n      : dispatch(addContact(contact));\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { resetForm }) => {\n        checkContact(values);\n        resetForm();\n      }}\n    >\n      {({ values, handleSubmit }) => (\n        <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n          <Form.Group className=\"mb-3\">\n            <Form.Label htmlFor=\"name\">Name</Form.Label>\n            <Field\n              as={Form.Control}\n              type=\"text\"\n              name=\"name\"\n              value={values.name}\n            />\n            <ErrorMessage name=\"name\" component={Form.Text} />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\">\n            <Form.Label htmlFor=\"number\">Number</Form.Label>\n            <Field\n              as={Form.Control}\n              type=\"tel\"\n              name=\"number\"\n              value={values.number}\n            />\n            <ErrorMessage name=\"number\" component={Form.Text} />\n          </Form.Group>\n\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'react-bootstrap';\nimport { deleteContact } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\n\nexport const ListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <li>\n      {name}: {number}\n      <Button\n        variant=\"outline-secondary\"\n        size='sm'\n        onClick={() => dispatch(deleteContact(id))}\n        disabled={isLoading}\n      >\n        Delete\n      </Button>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ListWrap\":\"Contacts_ListWrap__3liTH\"};","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { Loader } from 'components/Loader/Loader';\nimport { ListItem } from 'components/ListItem/ListItem';\nimport css from './Contacts.module.css';\n\nexport const Contacts = ({ children }) => {\n  const items = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = () => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <div>\n      {children}\n      <div className={css.ListWrap}>\n        {isLoading && <Loader />}\n        {error !== null && error}\n        <ul>\n          {filteredContacts().map(({ id, name, number }) => {\n            return <ListItem key={id} id={id} name={name} number={number} />;\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nContacts.propTypes = {\n  children: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport { addFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    let value = e.currentTarget.value;\n    dispatch(addFilter(value));\n  };\n\n  return (\n    <Form>\n      <Form.Group className=\"mb-3\">\n        <h2>Find contacts by name</h2>\n        <Form.Label />\n        <Form.Control as={'input'} onChange={changeFilter}></Form.Control>\n      </Form.Group>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function ContactsPage() {\n  return (\n    <div className=\"contacts-content\">\n      <div className=\"contacts-form\">\n        <h2 className=\"contacts-title\">Contacts</h2>\n        <ContactForm />\n      </div>\n      <div className=\"contacts-list\">\n        <Contacts children={<Filter />} />\n      </div>\n    </div>\n  );\n}\n"],"names":["validationSchema","yup","shape","name","matches","message","required","number","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","Error","selectFilter","filter","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","values","_ref","resetForm","contact","find","person","alert","concat","addContact","checkContact","children","_ref2","handleSubmit","_jsxs","Form","autoComplete","className","htmlFor","Field","as","type","value","ErrorMessage","component","Button","ListItem","id","variant","size","onClick","deleteContact","disabled","Contacts","error","useEffect","fetchContacts","css","Loader","toLowerCase","includes","map","Filter","onChange","e","currentTarget","addFilter","ContactsPage"],"sourceRoot":""}